/*
Apicurio Registry API

Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 

API version: 1.3.2.Final
Contact: apicurio@lists.jboss.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SearchOver 
type SearchOver string

// List of SearchOver
const (
	EVERYTHING SearchOver = "everything"
	NAME SearchOver = "name"
	DESCRIPTION SearchOver = "description"
	LABELS SearchOver = "labels"
)

// All allowed values of SearchOver enum
var AllowedSearchOverEnumValues = []SearchOver{
	"everything",
	"name",
	"description",
	"labels",
}

func (v *SearchOver) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchOver(value)
	for _, existing := range AllowedSearchOverEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchOver", value)
}

// NewSearchOverFromValue returns a pointer to a valid SearchOver
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchOverFromValue(v string) (*SearchOver, error) {
	ev := SearchOver(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchOver: valid values are %v", v, AllowedSearchOverEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchOver) IsValid() bool {
	for _, existing := range AllowedSearchOverEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchOver value
func (v SearchOver) Ptr() *SearchOver {
	return &v
}

type NullableSearchOver struct {
	value *SearchOver
	isSet bool
}

func (v NullableSearchOver) Get() *SearchOver {
	return v.value
}

func (v *NullableSearchOver) Set(val *SearchOver) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchOver) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchOver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchOver(val *SearchOver) *NullableSearchOver {
	return &NullableSearchOver{value: val, isSet: true}
}

func (v NullableSearchOver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchOver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

